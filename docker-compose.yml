version: '3.3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    # deploy:
      # resources:
      #   reservations:
      #     cpus: '1'
      #     memory: 1G
      #   limits:
      #     cpus: '1.2'
      #     memory: 1.1G
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://20.16.155.55:9092,PLAINTEXT_INTERNAL://broker:29092
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 
  
  cassandra:
    image: cassandra
    # deploy:
    #   resources:
    #     reservations:
    #       cpus: '0.4'
    #       memory: 4G
    #     limits:
    #       cpus: '3'
    #       memory: 3G
    hostname: cassandra
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - ~/apps/cassandra:/var/lib/cassandra

  connect:
    image: datastax-connect:latest
    # deploy:
    #   resources:
    #     reservations:
    #       cpus: '2'
    #       memory: 2G
    #     limits:
    #       cpus: '3'
    #       memory: 3G
    hostname: datastax-connect
    container_name: datastax-connect
    depends_on:
      - broker
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: datastax-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: datastax-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  
  web-app:
    image: weather-web-app:latest
    container_name: web-app
    ports:
      - "3000:3000"
    depends_on:
      - kafka-consumer
      - backend
    environment:
      REACT_APP_OPEN_WEATHER_API_KEY: ddbb8aaabb72066582b51071047352a2
      REACT_APP_KAFKA_CONSUMER_IP: localhost
      REACT_APP_KAFKA_CONSUMER_PORT: 8080

  kafka-consumer:
    image: kafka-consumer:latest
    container_name: kafka-consumer
    ports:
      - "8080:8080"

  backend:
    image: weather-app-backend:latest
    container_name: backend
    ports:
      - "8000:8000"



